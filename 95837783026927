<head>
 <meta http-equiv="Content-Type" content="text/html ">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>'Re:  TCP domain queries' - MARC</title>
 <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000C0" vlink="#800080">
<pre><b>[<a href="?l=namedroppers&m=95837783026926&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783026928&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837783026926&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837783026932&w=2">next in thread</a>] </b>
<b><font size=+1>
List:       <a href="?l=namedroppers&r=1&w=2">namedroppers</a>
Subject:    <a href="?t=95837890400005&r=1&w=2">Re:  TCP domain queries</a>
From:       <a href="?a=95837784000019&r=1&w=2">Rob Austein &lt;SRA () XX ! LCS ! MIT ! EDU&gt;</a>
Date:       <a href="?l=namedroppers&r=1&w=2&b=198808">1988-08-10 15:01:09</a></font>
[Download RAW <a href="?l=namedroppers&m=95837783026927&q=mbox">message</a> or <a href="?l=namedroppers&m=95837783026927&q=raw">body</a>]</b>

A couple of observations, the short one first: A possible reason for
lighting the REFUSED bit is to say "I'm sorry, but I only give out
that information to trusted clients".  You may or may not agree with
the policy decision involved here, but there are real world cases
where people want this option and if we outlaw this behavior they'll
just find some non-spec way to do the same thing.

Now, the TCP vs. UDP arguments.  I agree that, in terms of service
requirements, all nameservers should somehow support both UDP and TCP.
However, I am not convinced that it is a good idea to attempt to
enforce this requirement on a nameserver implemented as a single
process that has to handle both UDP and TCP (eg, Berkeley bind as
currently implmented).  Doing so can lead to denial-of-service
problems.  There are various ways of working around this, my
preference is to implement the "nameserver" as more than one process
with some method of sharing the database (does not imply shared
memory).

I'm currently working on the design specification for a setup
consisting of four processes:
	1) Resolver;
	2) UDP name server;
	3) TCP name server;
	4) Zone transfer client.
The resolver and both of the name servers have zone files loaded into
their in-memory databases; the resolver also has a cache, the name
servers do not.  When one of the name servers gets a query, it checks
the RECURSION-DESIRED bit; if the bit is off, the name server answers
the query out of its own database or not at all (null answer, not
black hole), if the bit is on the name server asks the resolver to do
the work and just passes the answer back.  The zone transfer client is
a totally asynchronous process which is started periodicly by cron
(BATCON, DRAGON, whatever); the zone transfer client's sole task is to
snarf new versions of desired zones and write them to the local disk
(or whatever network file system passes for "local disk"), then signal
the other processes that there is a new file to pick up.  The
requirements for this to work are:
	a) a conventional timesharing system for all this to run on,
	   to handle scheduling issues;
	b) some kind of conventional filesystem for configuration and
	   zone files, these files taken together constitute the
	   "shared database";
	c) some kind of reliable asynchronous inter-process
	   communication that can safely be aborted unilaterally (so
	   that the processes are not parasiticly dependent on each
	   other), used to communicate requests, responses, and
	   notifications.

This setup does not suffer from denial-of-service problems (at least,
not on the same order as the single process model) and does not
involve any hairy locking mechanisms, as it uses the services provided
by a conventional timesharing system to handle most of the hard parts.
The zone files loaded into the resolver are just for efficiency, they
are not necessary to the model.  The separate TCP and UDP name servers
are to provide fast service on UDP queries even if a zone transfer or
some other lengthy TCP operation is happening.  If the operating
system in question provides sufficiently good support for interleaving
TCP and UDP in a single process the two name servers can be merged
(the only operating system I know of that provides this kind of
support is ITS, but there may be others).

In addition, this model provides a firewall to slow the spread of
(possibly bogus) data from the resolver's cache; if the client is a
stub resolver and asks for recursive service, fine, it gets the cached
data, but if it's a full resolver doing iterative queries, it only
gets the information that was loaded into the name server by the
(theoreticly) responsible administrator.

There is of course a price, this setup uses more process slots and
swap space and involves more overhead to the timesharing scheduler
than a single process setup would.  This seems to me a small price to
pay for the increase in reliability, but then I mostly use large
timesharing machines where these resources aren't particularly scarce.

--Rob
-------

<b>[<a href="?l=namedroppers&m=95837783026926&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783026928&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837783026926&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837783026932&w=2">next in thread</a>] </b>
</pre>
  </pre><br><center>
    <a href="?q=configure">Configure</a> | 

    <a href="?q=about">About</a> |
    <a href="?q=news">News</a> |
    <a href="mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC">Add&nbsp;a&nbsp;list</a> |
    Sponsored&nbsp;by&nbsp;<a href="http://www.korelogic.com/">KoreLogic</a>
</center>
</body>
</html>
