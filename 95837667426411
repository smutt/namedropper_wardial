<head>
 <meta http-equiv="Content-Type" content="text/html ">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>'nicknames vs abbreviations' - MARC</title>
 <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000C0" vlink="#800080">
<pre><b>[<a href="?l=namedroppers&m=95837667426410&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837667426412&w=2">next in list</a>] [<font color="#c0c0c0">prev in thread</font>] [<font color="#c0c0c0">next in thread</font>] </b>
<b><font size=+1>
List:       <a href="?l=namedroppers&r=1&w=2">namedroppers</a>
Subject:    nicknames vs abbreviations
From:       <a href="?a=95837692300022&r=1&w=2">cbpavo.cbosgd.ATT!mark () seismo ! ARPA (Mark Horton)</a>
Date:       <a href="?l=namedroppers&r=1&w=2&b=198505">1985-05-01 23:44:56</a></font>
[Download RAW <a href="?l=namedroppers&m=95837667426411&q=mbox">message</a> or <a href="?l=namedroppers&m=95837667426411&q=raw">body</a>]</b>

Peter Karp suggests that nicknames are for a many-to-one mapping
of names onto systems, and that abbreviations are to make it
easier to type things, and that the two concepts are completely
different.

This might make sense if we were designing a system from scratch.
However, the previous use of nicknames seems to have been to
make names shorter and easier to type ("MC" -&gt; "MIT-MC", etc.)
This points out what should be obvious: even if the two concepts
might start out separate, a trivial way to implement a limited
(and perfectly sufficient) abbreviation facility is to use nicknames.

I'd like to point out another example of use of nicknames for the
many-to-one mapping concept, besides the renaming of hosts.  The
nickname facility can be used to find a generic service without
having to fix the software.  For example, if you want to run off
your memo on the laser-printer-server, your command to do so might
refer to host "laser-printer".  This is a nickname for the host
assigned to be your hosts server.  It's easily implemented by
adding a nickname to your local domain server, so that the same
name from two different hosts might point to two different servers.

This idea extends to lots of kinds of servers.  The project I'm working
on wants to make extensive use of this idea to get "the appropriate
X machine" for various types of "X" service (I wish I could go into
more detail but it's proprietary, sorry.)  It's a nice solution to
the problem "what do I give the network software routines when they
want a host name", a problem that is usually handed off to the user,
e.g. make the user type in a host name.  For a turnkey system with
a technically unsophisticated user who is barely aware that there is
a network underneath the computer system, and who is not going to want
to keep up with changes in the configuration, you can't expect the user
to supply the host name.

All this can be done with no modification to software - mine or
turnkey stuff that we don't have source to.  We haven't done it
yet, so if someone sees an obvious technical flaw I've missed, I'd
like to hear from you.

	Mark

<b>[<a href="?l=namedroppers&m=95837667426410&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837667426412&w=2">next in list</a>] [<font color="#c0c0c0">prev in thread</font>] [<font color="#c0c0c0">next in thread</font>] </b>
</pre>
  </pre><br><center>
    <a href="?q=configure">Configure</a> | 

    <a href="?q=about">About</a> |
    <a href="?q=news">News</a> |
    <a href="mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC">Add&nbsp;a&nbsp;list</a> |
    Sponsored&nbsp;by&nbsp;<a href="http://www.korelogic.com/">KoreLogic</a>
</center>
</body>
</html>
