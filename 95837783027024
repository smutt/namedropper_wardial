<head>
 <meta http-equiv="Content-Type" content="text/html ">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>'Rich Fox's suggestion' - MARC</title>
 <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000C0" vlink="#800080">
<pre><b>[<a href="?l=namedroppers&m=95837783027023&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783027025&w=2">next in list</a>] [<font color="#c0c0c0">prev in thread</font>] [<font color="#c0c0c0">next in thread</font>] </b>
<b><font size=+1>
List:       <a href="?l=namedroppers&r=1&w=2">namedroppers</a>
Subject:    Rich Fox's suggestion
From:       <a href="?a=95837785800022&r=1&w=2">Mark Crispin &lt;MRC () wsmr-simtel20 ! army ! mil&gt;</a>
Date:       <a href="?l=namedroppers&r=1&w=2&b=198811">1988-11-21 12:17:57</a></font>
[Download RAW <a href="?l=namedroppers&m=95837783027024&q=mbox">message</a> or <a href="?l=namedroppers&m=95837783027024&q=raw">body</a>]</b>

     On TOPS-20, the equivalent of gethostbyname() only returns a single
value for an IP address.  In the bad old days, it would simply return the
first address in the host table (obviously not The Right Thing).  The way
I solved it (eventually adopted in DEC's distributed version) was as
follows.

     TOPS-20 already an a concept of "default" IP address.  This was the
IP address used as the local IP address in a datagram going to a network
reached via a gateway.  In other words, if I am multihomed on a backbone
and a LAN, I set the default to be the backbone to avoid a gateway hop,
and use the LAN only when communicating on the LAN.

     On top of this I introduced a concept of "preferred" IP address.
If I'm communicating to another host that is multihomed on the backbone
and the LAN, I use the "preferred" network which may be different from
the "default" if, for example, the LAN is faster.

     The address lookup then worked as follows: pick an address that is
on the same network as the preferred address, then pick one that is on
the same network as the default address, then pick one that is on any
network we are directly connected to (for three or more homed hosts, you
lucky devils) in host table order, then finally pick any address in host
table order.

     This type of scheme starts faltering with increasing complexity in
the network topology (for example, the Stanford network, formerly a LAN,
is now part of a cluster that has significantly faster paths to the
outside world than the "backbone" ARPANET).  It also has the basic
weakness of TOPS-20's address lookup in only returning a single IP address.
If that address is a loser, the applications on TOPS-20 simply assume the
host in question is down...leading to some justifiable criticism.

     However, it still ends up that it works pretty well to this day.

     My contention, from day 1 of designing domains, is that the domain
*server* needs to have significant intelligent about the host that the
querying resolver is running on, and should fabricate its answers based
upon that.  That is, a server should give host A different information
from host B, depending upon who A is as opposed to B.  This is one case
where the more or less flat design of RR's falters.

-- Mark --

<b>[<a href="?l=namedroppers&m=95837783027023&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783027025&w=2">next in list</a>] [<font color="#c0c0c0">prev in thread</font>] [<font color="#c0c0c0">next in thread</font>] </b>
</pre>
  </pre><br><center>
    <a href="?q=configure">Configure</a> | 

    <a href="?q=about">About</a> |
    <a href="?q=news">News</a> |
    <a href="mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC">Add&nbsp;a&nbsp;list</a> |
    Sponsored&nbsp;by&nbsp;<a href="http://www.korelogic.com/">KoreLogic</a>
</center>
</body>
</html>
