<head>
 <meta http-equiv="Content-Type" content="text/html ">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>'Re:  domain names' - MARC</title>
 <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000C0" vlink="#800080">
<pre><b>[<a href="?l=namedroppers&m=95837759026745&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837759026747&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837759026743&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837759026752&w=2">next in thread</a>] </b>
<b><font size=+1>
List:       <a href="?l=namedroppers&r=1&w=2">namedroppers</a>
Subject:    <a href="?t=90385617000001&r=1&w=2">Re:  domain names</a>
From:       <a href="?a=95837784000007&r=1&w=2">mark () cbpavo ! cbosgd ! ATT ! COM (Mark Horton)</a>
Date:       <a href="?l=namedroppers&r=1&w=2&b=198608">1986-08-05 14:15:08</a></font>
[Download RAW <a href="?l=namedroppers&m=95837759026746&q=mbox">message</a> or <a href="?l=namedroppers&m=95837759026746&q=raw">body</a>]</b>

Some very interesting ideas.  I recall that when RFC 920 domains were
first being worked on, there was much interest in having an explicit
trailing dot on the end to denote either a FQN (fully qualified name)
or a PQN (partially qualified name).  It wound up being shot down, I
think the reasoning was that it was to become the user interface's
problem to deal with PQN's, and that the transport syntax need only
deal with FQN's.  What has evolved is that user interfaces have a very
hard time dealing with PQN's, and so most of them either punt the problem
completely or come up with some nickname hack that avoids the problem.
Given the transport spec, it's hard to do a user interface that (1)
accepts transport syntax, (2) accepts PQN's, (3) works right.  In my
personal opinion, it would have been better to put a trailing dot on
the end of an FQN, so that an undotted name would be considered a PQN
to be expanded heuristically.

It's also interesting to note the politics and other standards that have
evolved independently.  As far as I know, everybody else wants to do it
left-to-right (big endian) and RFC 920 stands alone (except for the Postal
Service) with a right-to-left (little endian) syntax.  Which way you
go is a religious issue, with little technical merit, but the presence
of both kinds of naming cause tremendous headaches for those of us who
must deal with both worlds.  (The gateway code on UCL-CS must be a monster,
and there is an ambiguity if a local user on UCL-CS refers to "FOO.BAR".)

Here are some of the other host name schemes that are evolving:

UUCP: this is really a route, but it's hop1!hop2!...!hopn!user, which
is left-to-right.

DECNET: host::user

Datakit: areacode/exchange/host

X.400: there isn't really a syntax to write this down, and they don't do
host names, but their mindset is clear: they write things left-to-right,
or sometimes top-to-bottom:
	Country		US
	ADMD		ATT
	PRMD		UUCP
	Org Name	ATT
	Org Unit Name	MEDIS
	Personal Name	Surname		Horton
			GivenName	Mark
			Initials	MR

RFC987 specifies a way to write this down.  While it doesn't constrain
the order any, the intent seems to be left-to-right:
	/C=US/O=ATT/OU=MEDIS/PN=Mark.R.Horton/

AT&amp;T, in particular, is strongly culturally accustomed to big endian
syntax.  They are, after all, the telephone company that invented
(ac)prefix-loop, UNIX with /usr/joe/file filenames, and UUCP paths.
There are efforts internal to the company to form addressing standards,
and all are strongly big endian based.  This is a company with a long
tradition of setting the standards that everyone else must conform to
(having once been a telephone monopoly) which is just now becoming
aware that it would be a good idea to conform to standards that already
exist.  Getting agreement to conform to international standards such as
OSI and X.400 is starting to occur, but there is little interest in
conforming to ARPA standards.  (They see TCP/IP as a dying protocol to
be replaced by OSI in a few years.  I've pointed out that RFC 920
domains transcend TCP/IP and are in fact almost universally used in
Worldnet today, and that X.400 has no corresponding standard other than
X.121, which is a big endian numeric host addressing scheme comparable
to IP addresses, looking very much like international telephone
numbers.  IP addresses themselves are big endian.  The issue is
currently under discussion inside the company.)

There are a few minor technical issues.  It seems to me that when
writing an address, it's easier to write it in big endian syntax, but
when reading a fully qualified address, I prefer little endian.  I
asked an AT&amp;T human factors person for comments, and he said that big
endian is always better.  Then there's the truncation issue: what
happens when a name gets truncated due to a column-oriented printout,
or some fixed length field?  (This happens all the time, especially in
UUCP, which truncates to 6, 7, 8, or 14, depending on the version of
the software and which service you are using.)  Truncation generally
happens by keeping the first N characters.  With little endian, you
lose information near the root of the tree, leaving a string which is
likely to be unique and which you're likely to recognize.
("a.cis.medis.att.us" becomes "a.cis.", for example.)  With big endian,
you lose leaf information, for example, "us.att.medis.cis.a" becomes
"us.att".)  This isn't very useful.  I think this is mainly an upward
compatibility issue.

In summary, I think that if ARPA had chosen to use a big endian syntax
in the first place, life would be much simpler now.  If there were some
way to convert to big endian in place (I don't see how) there would be
an excellent chance of the ARPA syntax becoming part of OSI, AT&amp;T,
etc.

I would prefer to have an explicit root indicator, such as an extra
dot.  UNIX filenames use a leading slash for this, and it works well.
The &lt; and &gt; business is implemented with "../", which is a bit longer
but doesn't come up very often in practice.

Finally, a syntax should be easy to type, and not use character that
get in the way of command interpreters.  UNIX and MS DOS use &lt; and &gt;
for file redirection, which would make their use as parts of host names
awkward.  Characters such as "-", "." and "/" are both easy to type,
and fairly safe.  (Slash is, unfortunately, not safe as a leading
character on MS DOS and other DEC inspired systems, just as - isn't
safe as a leading character on UNIX, because it delimits options.  Dot
is, as far as I know, safe.)

	Mark

<b>[<a href="?l=namedroppers&m=95837759026745&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837759026747&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837759026743&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837759026752&w=2">next in thread</a>] </b>
</pre>
  </pre><br><center>
    <a href="?q=configure">Configure</a> | 

    <a href="?q=about">About</a> |
    <a href="?q=news">News</a> |
    <a href="mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC">Add&nbsp;a&nbsp;list</a> |
    Sponsored&nbsp;by&nbsp;<a href="http://www.korelogic.com/">KoreLogic</a>
</center>
</body>
</html>
