<head>
 <meta http-equiv="Content-Type" content="text/html ">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>'Re: more on attribute-based naming' - MARC</title>
 <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000C0" vlink="#800080">
<pre><b>[<a href="?l=namedroppers&m=95837783026906&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783026905&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837783026902&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837783026905&w=2">next in thread</a>] </b>
<b><font size=+1>
List:       <a href="?l=namedroppers&r=1&w=2">namedroppers</a>
Subject:    <a href="?t=95837890200027&r=1&w=2">Re: more on attribute-based naming</a>
From:       <a href="?a=95837785400017&r=1&w=2">Debbie Deutsch &lt;ddeutsch () LABS-N ! BBN ! COM&gt;</a>
Date:       <a href="?l=namedroppers&r=1&w=2&b=198805">1988-05-17 20:46:03</a></font>
[Download RAW <a href="?l=namedroppers&m=95837783026904&q=mbox">message</a> or <a href="?l=namedroppers&m=95837783026904&q=raw">body</a>]</b>

Back in the days when work that led to X.500 was first taken up by
IFIP 6.5 (the early 1980s), most people came to the table with the
idea that the global Directory would have a relational database.  The
problem was how to implement it.  If a search key contained only
relational information, and the database were distributed in an
arbitrary pattern, searching the global Directory for an entry would
be very slow and expensive.  There had to be some well-understood way
to relate a search key to a (relatively efficient) search pattern.
This problem has been the driving force in the design of the X.500 
series.

The compromise solution to this dilemma was to build the notion of
hierarchy into the way the Directory evaluated the attributes in a
purported name.  People would not have to be aware of this hierarchy.
First people thought of using acyclic graphs.  This was later
simplified to trees.  The idea was that one or more attributes of a
name could be easily mapped into a DSA (DSA = element of the
Directory) that was responsible for a subtree of the namespace, and
that that DSA could take it from there (perhaps recursively).

Variations (perhaps very large variations) in the database schema are
supported through the use of object classes, whose specifications are
stored as part of X.500 database entries.  This allows different parts
of the namespace to have very different rules for naming or what is in
a directory entry.  Based on this, I'd like to disagree with your
analogy to nameservers and interdependency. The X.500 Directory is by
no means monolithic.

X.500's filtering mechanism is more extensive than your documentation
indicates.  X.500 filters are logical expressions composed of
comparison and boolean operators and can be supplied as part of a
query.  There is provision for storing "search guides" as part of the
Directory.  A search guide would suggest search criteria that could be
particularly useful in a particular subtree of the database.  For
example, a search guide might point out which attributes are defined
and widely used within a certain subtree.  A query language (and
related functions) such as you suggest would fit very nicely into a
DUA (Directory User Agent = application that represents a user of the
directory).  From what I can tell, this is not a difference in models
that you or the standards groups use.  Instead, it seems to me that
the two are entirely complementary.

In response to your question about the relationship between X.400 and
X.500, when the part of X.400 that deals with "O/R Names" was being
written, people knew that the solution was only temporary.  In fact,
there is even a note in one of the X.400 documents to the effect that
O/R Names are really addresses, and that support for naming would have
to be defined!  (A domain name is really a form of address, too, for
that matter.)  A directory service was what was really needed, but
there wasn't time and scope to do that.  X.500's major objectives are
to

  - provide name/address mapping for telematic services, such as X.400
    message handling services, and

  - provide browsing capabilities to people who use those telematic
    services.

X.500 in no way replaces X.400.  Instead, it is better to think of
X.500 as potentially changing the way X.400 addresses are obtained.
(I'd have to check the 1988 version of X.400 to see what, if any
changes in the definitions of names and addresses have been made
there.)

The SEARCH operation (with filters) is X.500's interface to yellow
pages service.  X.500 defines a range of object classes, including
classes for users, groups, applications, and even network devices.
(Note that support for groups is sketchy.)  The X.500 aliasing
capability has been suggested as an internal mechanism for enhanced
yellow pages support; the attributes that "lead to" a special yellow
pages entry would be resolved to an alias of a regular entry.  For
example, a Boston yellow pages could have a subclass of entries
concerned with automobile repair services.  These entries might be
represented by a node in the naming tree.  A search of those entries
specifying that the "town" attribute be Cambridge or Watertown would
turn up some number of leaf entries that were aliases; the aliases
would be dereferenced, and the correct entries returned.

Work on X.500 continues, as does yours.  Unfortunately, much of what
the standards groups are doing also could be classified as research.
I suspect that you and the standards groups are dealing with different
areas of interest, though.  Based on what your messages, I gather that
you are concentrating on the nature of queries and what it means to
resolve a name.  Based on my knowledge of X.500, the standards groups
are concentrating on the mechanics of implementing a very large and
highly distributed directory system that supports attribute-based
names.  Some very interesting and important problems remain to be be
solved in both areas.

--Debbie

<b>[<a href="?l=namedroppers&m=95837783026906&w=2">prev in list</a>] [<a href="?l=namedroppers&m=95837783026905&w=2">next in list</a>] [<a href="?l=namedroppers&m=95837783026902&w=2">prev in thread</a>] [<a href="?l=namedroppers&m=95837783026905&w=2">next in thread</a>] </b>
</pre>
  </pre><br><center>
    <a href="?q=configure">Configure</a> | 

    <a href="?q=about">About</a> |
    <a href="?q=news">News</a> |
    <a href="mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC">Add&nbsp;a&nbsp;list</a> |
    Sponsored&nbsp;by&nbsp;<a href="http://www.korelogic.com/">KoreLogic</a>
</center>
</body>
</html>
